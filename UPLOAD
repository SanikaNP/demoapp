import { Component, ViewEncapsulation } from '@angular/core';
import { GridApi, Module, ColDef, ColGroupDef, GridReadyEvent, CellClickedEvent, CellDoubleClickedEvent, CellContextMenuEvent, ICellRendererParams } from '@ag-grid-community/core'; 
import { ClientSideRowModelModule } from "@ag-grid-community/client-side-row-model";
import { MenuModule } from '@ag-grid-enterprise/menu';
import { SideBarModule } from '@ag-grid-enterprise/side-bar';
import { ColumnsToolPanelModule } from '@ag-grid-enterprise/column-tool-panel';
import { FiltersToolPanelModule } from '@ag-grid-enterprise/filter-tool-panel';
import { RowGroupingModule } from '@ag-grid-enterprise/row-grouping';
import { StatusBarModule } from '@ag-grid-enterprise/status-bar';
import { RendererComponent } from '../renderer-component/renderer.component';
import RefData from '../data/refData';
import { HeaderGroupComponent } from '../header-group-component/header-group.component';
import * as XLSX from 'xlsx'; // Import the xlsx library
import * as FileSaver from 'file-saver'; // Import the file-saver library


@Component({
    selector: 'rich-grid',
    templateUrl: 'rich-grid.component.html',
    styleUrls: ['rich-grid.css', 'proficiency-renderer.css'],
    encapsulation: ViewEncapsulation.None
})
export class RichGridComponent {
    public rowData!: any[];
    public columnDefs!: (ColDef | ColGroupDef)[];
    public rowCount!: string;
    public defaultColDef: ColDef;
    public components: any;
    public sideBar!: boolean;
    public modules: Module[] = [
        ClientSideRowModelModule,
        MenuModule,
        SideBarModule,
        ColumnsToolPanelModule,
        FiltersToolPanelModule,
        StatusBarModule,
        RowGroupingModule
    ];
    public api!: GridApi;
showDownloadOptions: any;

    constructor() {
        this.defaultColDef = {
            editable: true,  // Make all cells editable
            filter: true,
            floatingFilter: true,
            headerComponent: 'sortableHeaderComponent',
            headerComponentParams: {
                menuIcon: 'fa-bars'
            },
            cellDataType: false,
        };

        this.components = {
            headerGroupComponent: HeaderGroupComponent,
            rendererComponent: RendererComponent
        };

        this.createRowData();
        this.createColumnDefs();
    }

    public openDownloadOptions() {
        this.showDownloadOptions = !this.showDownloadOptions;
    }

    // Download JSON
    public downloadJson() {
        const jsonData = JSON.stringify(this.rowData, null, 2);
        const blob = new Blob([jsonData], { type: 'application/json' });
        FileSaver.saveAs(blob, 'data.json');
    }

    // Download XLSX
    public downloadXlsx() {
        const worksheet = XLSX.utils.json_to_sheet(this.rowData);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');
        XLSX.writeFile(workbook, 'data.xlsx');
    }

    public createRowData() {
        const rowData: any[] = [];

        for (let i = 0; i < 200; i++) {
            const EmpData = RefData.EmpId[i % RefData.EmpId.length];
            rowData.push({
                name: RefData.firstNames[i % RefData.firstNames.length] + ' ' + RefData.lastNames[i % RefData.lastNames.length],
                dob: RefData.DOBs[i % RefData.DOBs.length],
                address: RefData.addresses[i % RefData.addresses.length],
                years: Math.round(Math.random() * 100),
                EmployeeId: EmpData.EmployeeId,
                mobile: createRandomPhoneNumber(),
                department: RefData.departments[i % RefData.departments.length],
                position: RefData.positions[i % RefData.positions.length],
                salary: Math.floor(Math.random() * 90000) + 10000 // Random salary between 10,000 and 100,000
            });
        }

        this.rowData = rowData;
    }

    private createColumnDefs() {
        this.columnDefs = [
            {
                headerName: '#',
                width: 40,
                checkboxSelection: true,
                filter: false,
                sortable: false,
                suppressMenu: true,
                pinned: true
            },
            {
                headerName: 'Employee',
                headerGroupComponent: 'headerGroupComponent',
                children: [
                    {
                        field: 'name',
                        width: 150,
                        pinned: true,
                        enableRowGroup: true,
                        enablePivot: true
                    },
                    {
                        field: 'EmployeeId',
                        width: 150,
                        pinned: true,
                        enableRowGroup: true,
                        enablePivot: true,
                        columnGroupShow: 'open'
                    },
                    {
                        headerName: 'DOB',
                        field: 'dob',
                        width: 195,
                        pinned: true,
                        cellRenderer: (params: ICellRendererParams) => {
                            return pad(params.value.getDate(), 2) + '/' +
                                pad(params.value.getMonth() + 1, 2) + '/' +
                                params.value.getFullYear();
                        },
                        filter: 'agDateColumnFilter',
                        columnGroupShow: 'open'
                    }
                ]
            },
            {
                headerName: 'Contact',
                children: [
                    {
                        field: 'mobile',
                        minWidth: 150,
                        filter: 'agTextColumnFilter'
                    },
                    {
                        field: 'address',
                        minWidth: 500,
                        filter: 'agTextColumnFilter'
                    }
                ]
            },
            {
                headerName: 'Employment Details',
                children: [
                    {
                        field: 'department',
                        headerName: 'Department',
                        minWidth: 150,
                        filter: 'agTextColumnFilter'
                    },
                    {
                        field: 'position',
                        headerName: 'Position',
                        minWidth: 150,
                        filter: 'agTextColumnFilter'
                    },
                    {
                        field: 'salary',
                        headerName: 'Salary',
                        minWidth: 150,
                        filter: 'agNumberColumnFilter'
                    }
                ]
            }
        ];
    }

    private calculateRowCount() {
        if (this.api && this.rowData) {
            const model = this.api.getModel();
            const totalRows = this.rowData.length;
            const processedRows = model.getRowCount();
            this.rowCount = processedRows.toLocaleString() + ' / ' + totalRows.toLocaleString();
        }
    }

    public onModelUpdated() {
        this.calculateRowCount();
    }

    public onGridReady(params: GridReadyEvent) {
        this.api = params.api;
        this.api.sizeColumnsToFit();
        this.calculateRowCount();
    }

    public onCellClicked($event: CellClickedEvent) {}
    public onCellDoubleClicked($event: CellDoubleClickedEvent) {}
    public onCellContextMenu($event: CellContextMenuEvent) {}

    public onQuickFilterChanged($event: any) {
        this.api.setQuickFilter($event.target.value);
    }

    // Method to add a new row below the selected row
    // Method to add a new blank row below the selected row
public addRow() {
    const selectedNodes = this.api.getSelectedNodes();
    if (selectedNodes.length > 0) {
        const selectedNode = selectedNodes[0]; // Get the first selected node

        // Ensure that selectedNode has a valid rowIndex
        if (selectedNode && typeof selectedNode.rowIndex === 'number') {
            // Create a new row with blank fields
            const newRow = {
                name: '',
                dob: null,
                address: '',
                years: null,
                EmployeeId: '',
                mobile: '',
                department: '',
                position: '',
                salary: null
            };

            // Add the new blank row below the selected row
            this.api.applyTransaction({ add: [newRow], addIndex: selectedNode.rowIndex + 1 });
        } else {
            // Handle case where selectedNode does not have a valid row index
            console.warn("Selected node is invalid or does not have a row index.");
        }
    } else {
        // Handle case where no row is selected
        console.warn("No row is selected.");
    }
}


    // Method to delete selected rows
    public delRow() {
        const selectedNodes = this.api.getSelectedNodes();
        const idsToDelete = selectedNodes.map(node => node.data.EmployeeId); // Assuming EmployeeId is unique
        this.api.applyTransaction({ remove: selectedNodes.map(node => node.data) }); // Remove the selected rows
    }
}

function createRandomPhoneNumber() {
    const digits = '0123456789';
    let phoneNumber = '';
    for (let i = 0; i < 10; i++) {
        phoneNumber += digits.charAt(Math.floor(Math.random() * digits.length));
    }
    return phoneNumber;
}

function pad(num: number, size: number) {
    let s = "000" + num;
    return s.substr(s.length - size);
}







<div style="width: 100%; padding: 20px">
    <h1>AG-GRID-ANGULAR</h1>
    <div class="toolbar">
        <div class="left-buttons">
            <!-- Row buttons on the left -->
            <button (click)="addRow()" class="btn btn-primary">Add Row</button>
            <button (click)="delRow()" class="btn btn-primary">Delete Row</button>
            <button (click)="this.api.selectAll()" class="btn btn-primary">Select All</button>
            <button (click)="this.api.deselectAll()" class="btn btn-primary">Clear Selection</button>
        </div>

        <div class="quick-filter-section">
            <label for="quickFilter">Quick Filter:&nbsp;</label>
            <input (keyup)="onQuickFilterChanged($event)" type="text" id="quickFilter"
                   placeholder="Type text to filter..." style="margin-right: 20px"/>
        </div>

        <div class="right-buttons">
            <!-- Export button and download options -->
            <button (click)="openDownloadOptions()" class="btn btn-primary">Export</button>
            <div *ngIf="showDownloadOptions" class="download-options">
                <button (click)="downloadJson()" class="btn btn-secondary">JSON</button>
                <button (click)="downloadXlsx()" class="btn btn-secondary">XLSX</button>
            </div>
        </div>
    </div>

    <!-- AG Grid component -->
    <ag-grid-angular
        style="width: 100%; height: 650px;"
        class="ag-theme-alpine"
        [columnDefs]="columnDefs"
        [rowData]="rowData"
        [defaultColDef]="defaultColDef"
        [modules]="modules"
        [rowSelection]="'multiple'"
        (gridReady)="onGridReady($event)">
    </ag-grid-angular>
</div>



.toolbar {
    display: flex;
    justify-content: space-between; /* Controls spacing between left and right sections */
    align-items: center; /* Aligns all items in the center vertically */
    margin-top: 10px;
    margin-bottom: 10px;
}

.left-buttons {
    display: flex;
    flex-direction: row; /* Align buttons horizontally */
    gap: 10px; /* Space between buttons horizontally */
}

.row-buttons {
    display: flex;
    gap: 10px; /* Space between Add Row and Delete Row buttons */
}

.quick-filter-section {
    display: flex;
    align-items: center;
    margin-right: 280px; 
    margin-top: 10px; /* Adjust space above the Quick Filter */
}

.right-buttons {
    display: flex;
    align-items: center; /* Align items in a row */
}

.download-options {
    display: flex;
    gap: 5px; /* Space between the download buttons */
    font-size: 12px; /* Smaller font size for download options */
    margin-left: 10px; /* Adjust the space between export and download options */
}

.download-options button {
    padding: 2px 5px; /* Smaller padding for the buttons */
}










import { NgModule } from "@angular/core";
import { BrowserModule } from "@angular/platform-browser";
import { FormsModule } from "@angular/forms";
// ag-grid
import { AgGridModule } from "@ag-grid-community/angular"; // Importing AgGridModule

// application
import { AppComponent } from "./app.component";
// rich grid
import { RichGridComponent } from "./rich-grid-example/rich-grid.component";
import { DateComponent } from "./date-component/date.component";
import { SortableHeaderComponent } from "./header-component/sortable-header.component";
import { HeaderGroupComponent } from "./header-group-component/header-group.component";
import { RendererComponent } from './renderer-component/renderer.component';
import { ProficiencyFilter } from "./filters/proficiency.component.filter";
import { SkillFilter } from "./filters/skill.component.filter";
import * as FileSaver from 'file-saver';


@NgModule({
    imports: [
        BrowserModule,
        FormsModule,
        AgGridModule // Correctly importing AgGridModule without withComponents
    ],
    declarations: [
        AppComponent,
        RichGridComponent,
        DateComponent,
        SortableHeaderComponent,
        HeaderGroupComponent,
        RendererComponent,
        ProficiencyFilter,
        SkillFilter,
    ],
    bootstrap: [AppComponent]
})
export class AppModule {}



















import { ICellRendererAngularComp } from '@ag-grid-community/angular';
import { Component } from '@angular/core';

@Component({
    selector: 'custom-cell-renderer',
    template: `<div [style.background-color]="params.data.color || 'transparent'" [innerHTML]="params.value"></div>`,
})
export class CustomCellRenderer implements ICellRendererAngularComp {
    public params: any;

    agInit(params: any): void {
        this.params = params;
    }

    refresh(params: any): boolean {
        this.params = params;
        return true;
    }
}



















export default class RefData {

    static departments = ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'Operations'];
    static positions = ['Manager', 'Developer', 'Analyst', 'Designer', 'Sales Executive'];


    static firstNames = ["Sophie", "Isabelle", "Emily", "Olivia", "Lily", "Chloe", "Isabella",
        "Amelia", "Jessica", "Sophia", "Ava", "Charlotte", "Mia", "Lucy", "Grace", "Ruby",
        "Ella", "Evie", "Freya", "Isla", "Poppy", "Daisy", "Layla"];
    static lastNames = ["Beckham", "Black", "Braxton", "Brennan", "Brock", "Bryson", "Cadwell",
        "Cage", "Carson", "Chandler", "Cohen", "Cole", "Corbin", "Dallas", "Dalton", "Dane",
        "Donovan", "Easton", "Fisher", "Fletcher", "Grady", "Greyson", "Griffin", "Gunner",
        "Hayden", "Hudson", "Hunter", "Jacoby", "Jagger", "Jaxon", "Jett", "Kade", "Kane",
        "Keating", "Keegan", "Kingston", "Kobe"];

    static DOBs = [
        new Date(2000, 0, 1),
        new Date(2001, 1, 2),
        new Date(2002, 2, 3),
        new Date(2003, 3, 4),
        new Date(2004, 4, 5),
        new Date(2005, 5, 6),
        new Date(2006, 6, 7),
        new Date(2007, 7, 8),
        new Date(2008, 8, 9),
        new Date(2009, 9, 10),
        new Date(2010, 10, 11),
        new Date(2011, 11, 12)
    ];

    static EmpId = [
        { EmployeeId: "EMP001" },
        { EmployeeId: "EMP002" },
        { EmployeeId: "EMP003" },
        { EmployeeId: "EMP004" },
        { EmployeeId: "EMP005" },
        { EmployeeId: "EMP006" },
        { EmployeeId: "EMP007" },
        { EmployeeId: "EMP008" },
        { EmployeeId: "EMP009" },
        { EmployeeId: "EMP010" },
        { EmployeeId: "EMP011" },
        { EmployeeId: "EMP012" },
        { EmployeeId: "EMP013" },
        { EmployeeId: "EMP014" },
        { EmployeeId: "EMP015" },
        { EmployeeId: "EMP016" },
        { EmployeeId: "EMP017" },
        { EmployeeId: "EMP018" }
    ];
    

    static addresses = [
        '1197 Thunder Wagon Common, Cataract, RI, 02987-1016, US, (401) 747-0763',
        '3685 Rocky Glade, Showtucket, NU, X1E-9I0, CA, (867) 371-4215',
        '3235 High Forest, Glen Campbell, MS, 39035-6845, US, (601) 638-8186',
        '2234 Sleepy Pony Mall , Drain, DC, 20078-4243, US, (202) 948-3634',
        '2722 Hazy Turnabout, Burnt Cabins, NY, 14120-5642, US, (917) 604-6597',
        '6686 Lazy Ledge, Two Rock, CA, 92639-3020, US, (619) 901-9911',
        '2000 Dewy Limits, Wacahoota, NF, A4L-2V9, CA, (709) 065-3959',
        '7710 Noble Pond Avenue, Bolivia, RI, 02931-1842, US, (401) 865-2160',
        '3452 Sunny Vale, Pyro, ON, M8V-4Z0, CA, (519) 072-8609',
        '4402 Dusty Cove, Many Farms, UT, 84853-8223, US, (435) 518-0673',
        '5198 Silent Parade, Round Bottom, MD, 21542-9798, US, (301) 060-7245',
        '8550 Shady Moor, Kitty Fork, CO, 80941-6207, US, (303) 502-3767',
        '2131 Old Dell, Merry Midnight, AK, 99906-8842, US, (907) 369-2206',
        '7390 Harvest Crest, Mosquito Crossing, RI, 02957-6116, US, (401) 463-6348',
        '874 Little Point, Hot Coffee, BC, V3U-2P6, CA, (250) 706-9207',
        '8834 Stony Pioneer Heights, Newlove, OR, 97419-8670, US, (541) 408-2213',
        '9829 Grand Beach, Flint, UT, 84965-9900, US, (435) 700-5161',
        '3799 Cozy Blossom Ramp, Ptarmigan, MS, 38715-0313, US, (769) 740-1526',
    ];
}

















{
  "name": "ag-grid-angular-cli-example",
  "version": "31.1.0",
  "description": "AG Grid Angular Example Using Angular CLI",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/ag-grid/ag-grid-angular-cli-example.git"
  },
  "author": "Sean Landsman <sean@thelandsmans.com>",
  "scripts": {
    "start": "NODE_OPTIONS=--openssl-legacy-provider ng serve --port 8080",
    "build": "NODE_OPTIONS=\"--openssl-legacy-provider --max-old-space-size=8192\" ng build --aot",
    "build-prod": "npm run build",
    "lint": "tslint \"src/**/*.ts\"",
    "test:e2e": "NODE_OPTIONS=--openssl-legacy-provider ./node_modules/.bin/ng test --watch false --browsers ChromeHeadless",
    "test:watch": "NODE_OPTIONS=--openssl-legacy-provider ./node_modules/.bin/ng test --watch true  --browsers ChromeHeadless"
  },
  "private": true,
  "dependencies": {
    "@ag-grid-community/angular": "~31.1.0",
    "@ag-grid-community/client-side-row-model": "~31.1.0",
    "@ag-grid-community/core": "~31.1.0",
    "@ag-grid-community/styles": "~31.1.0",
    "@ag-grid-enterprise/charts": "~31.1.0",
    "@ag-grid-enterprise/column-tool-panel": "~31.1.0",
    "@ag-grid-enterprise/core": "~31.1.0",
    "@ag-grid-enterprise/filter-tool-panel": "~31.1.0",
    "@ag-grid-enterprise/menu": "~31.1.0",
    "@ag-grid-enterprise/range-selection": "~31.1.0",
    "@ag-grid-enterprise/row-grouping": "~31.1.0",
    "@ag-grid-enterprise/set-filter": "~31.1.0",
    "@ag-grid-enterprise/side-bar": "~31.1.0",
    "@ag-grid-enterprise/status-bar": "~31.1.0",
    "@angular/animations": "^14.3.0",
    "@angular/cdk": "^13.0.0",
    "@angular/common": "^14.3.0",
    "@angular/compiler": "^14.3.0",
    "@angular/core": "^14.3.0",
    "@angular/forms": "^14.3.0",
    "@angular/material": "^13.0.0",
    "@angular/platform-browser": "^14.3.0",
    "@angular/platform-browser-dynamic": "^14.3.0",
    "@angular/router": "^14.3.0",
    "ag-grid-angular-cli-example": "file:",
    "bootstrap": "4.5.0",
    "file-saver": "^2.0.5",
    "html2canvas": "^1.4.1",
    "jspdf": "^2.5.2",
    "rxjs": "~6.6.0",
    "tslib": "^2.3.0",
    "xlsx": "^0.18.5",
    "zone.js": "~0.11.4"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^14.2.12",
    "@angular/cli": "^14.2.12",
    "@angular/compiler-cli": "^14.3.0",
    "@testing-library/angular": "^12.3.0",
    "@testing-library/user-event": "^14.5.2",
    "@types/file-saver": "^2.0.7",
    "@types/jasmine": "~3.8.0",
    "@types/node": "18.19.10",
    "jasmine-core": "~3.8.0",
    "karma": "~6.3.0",
    "karma-chrome-launcher": "~3.1.0",
    "karma-coverage": "~2.0.3",
    "karma-jasmine": "~4.0.0",
    "karma-jasmine-html-reporter": "~1.7.0",
    "typescript": "~4.7.4"
  }
}

