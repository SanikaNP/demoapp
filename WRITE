import { Component, OnInit, TemplateRef } from '@angular/core';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { Department } from './department'; // Adjust path if department.ts is in the same folder
import { DepartmentService } from './department.service'; // Adjust path if department.service.ts is in the same folder

@Component({
  selector: 'app-department',
  templateUrl: './department.component.html',
  styleUrls: ['./department.component.css'],
})
export class DepartmentComponent implements OnInit {
  departments: Department[] = [];
  newDepartment: Department = {
    name: '',
    shortDescription: '',
    id: 0,
  };
  selectedDepartment: Department | null = null;

  constructor(private departmentService: DepartmentService, private modalService: NgbModal) {}

  ngOnInit(): void {
    this.loadDepartments();
  }

  loadDepartments(): void {
    this.departmentService.getDepartments().subscribe((data) => {
      this.departments = data;
    });
  }

  openAddDepartmentModal(content: TemplateRef<any>): void {
    this.newDepartment = { name: '', shortDescription: '', id: 0 }; // Reset the form
    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });
  }

  openEditDepartmentModal(content: TemplateRef<any>, department: Department): void {
    this.selectedDepartment = { ...department }; // Clone the department object to avoid mutation
    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });
  }

  saveDepartment(formValue: any): void {
    if (this.selectedDepartment) {
      // Update existing department
      this.departmentService.updateDepartment(this.selectedDepartment.id, formValue).subscribe(() => {
        this.loadDepartments();
        this.selectedDepartment = null; // Clear the selected department after saving
      });
    } else {
      // Add new department
      this.departmentService.addDepartment(formValue).subscribe((department) => {
        this.departments.push(department);
        this.newDepartment = { name: '', shortDescription: '', id: 0 }; // Reset the form
      });
    }
  }

  deleteDepartment(id: number): void {
    // Confirm deletion with a warning
    if (confirm('Are you sure you want to delete this department?')) {
      this.departmentService.deleteDepartment(id).subscribe(() => {
        this.departments = this.departments.filter((d) => d.id !== id);
      });
    }
  }
}
