import { Component, OnInit, TemplateRef } from '@angular/core';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { Employee } from './employee'; // Ensure this path is correct
import { EmployeeService } from './employee.service'; // Ensure this path is correct
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

@Component({
  selector: 'app-employee',
  templateUrl: './employee.component.html',
  styleUrls: ['./employee.component.css'],
})
export class EmployeeComponent implements OnInit {
  employees: Employee[] = [];
  newEmployee: Employee = {
    id: 0,
    name: '',
    dateOfBirth: '',
    qualification: '',
    city: '',
    state: '',
    pinCode: '',
    gender: '',
  };
  selectedEmployee: Employee | null = null;
    
  states: string[] = ['State1', 'State2', 'State3'];

  constructor(private employeeService: EmployeeService, private modalService: NgbModal) {}

  ngOnInit(): void {
    this.loadEmployees();
  }

  exportEmployees(): void {
    const ws: XLSX.WorkSheet = XLSX.utils.json_to_sheet(this.employees);
    const wb: XLSX.WorkBook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Employees');
    
    // Generate Excel file and save
    const excelBuffer: any = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    const data: Blob = new Blob([excelBuffer], { type: EXCEL_TYPE });
    saveAs(data, 'employees.xlsx');
  }

  loadEmployees(): void {
    this.employeeService.getEmployees().subscribe((data: Employee[]) => {
      this.employees = data;
    });
  }

  openAddEmployeeModal(content: TemplateRef<any>): void {
    this.newEmployee = {
      id: 0,
      name: '',
      dateOfBirth: '',
      qualification: '',
      city: '',
      state: '',
      pinCode: '',
      gender: '',
    };
    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });
  }

  openEditEmployeeModal(content: TemplateRef<any>, employee: Employee): void {
    this.selectedEmployee = { ...employee }; // Clone the employee object
    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });
  }

  saveEmployee(formValue: any): void {
    if (this.selectedEmployee) {
      // Update existing employee
      this.employeeService.updateEmployee(this.selectedEmployee.id!, formValue).subscribe(() => {
        this.loadEmployees();
        this.selectedEmployee = null; // Clear selectedEmployee after update
      });
    } else {
      // Add new employee
      this.employeeService.addEmployee(formValue).subscribe((employee: Employee) => {
        this.employees.push(employee);
        this.newEmployee = {
          id: 0,
          name: '',
          dateOfBirth: '',
          qualification: '',
          city: '',
          state: '',
          pinCode: '',
          gender: '',
        }; // Reset the form
      });
    }
  }

  deleteEmployee(id: number): void {
    if (confirm('Are you sure you want to delete this employee?')) {
      this.employeeService.deleteEmployee(id).subscribe(() => {
        this.employees = this.employees.filter((e) => e.id !== id);
      });
    }
  }
}

const EXCEL_TYPE =
  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';
const EXCEL_EXTENSION = '.xlsx';
